--------------------------------------------------
--	Helper Definitions									--
--------------------------------------------------
operatorlg	U		*
U	=	union

operatore	D		U
D	=	difference

operatore	I		D
I	=	intersection

operatorlg	all	*		--	Define all to have
								--	greater bind strength
								--	than *, and to be left-
								-- associative

product all [3, 5, 4]		=	60
sum all {2, 3, 4, 5}			=	14
union all [{5}, {6}, {}]	=	{5, 6}

forall f, x, y
	if f x y = f y x then
		f all {x}				=	x
		f all [x]				=	x
		f all {x, y}			=	f x y
		f all [x, y]			=	f x y
		f all (union {x} y)	=	f x (f all y)
		f all ([x] .. y)		=	f x (f all y)
		
		
		
null		=	{}



first 3 [1, 2, 3, 4, 5]		=	[1, 2, 3]
last 3 [1, 2, 3, 4, 5]		=	[3, 4, 5]
first 2 [1, 2, 3]				=	[1, 2]

first 0 []		=	[]
last 0 []		=	[]
forall x, y, z
	if y > 0 then
		first y []		=	[]
		last y []		=	[]
	if y >= 1 then
		first y [x]		=	x
		last y [x]		=	x
	first z [x .. y]	=	first z x .. first (z - len x) y
	last z [x .. y]	=	last (z - len y) x .. last z y
	
	
	
map not [true, true, false]	=	[false, false, true]
map negate {1, 2, 3}				=	{-1, -2, -3}
map square {2, -2}				=	{4}
	
forall f, x y
	map f []			=	[]
	map f {}			=	{}
	map f [x]		=	[f x]
	map f {x}		=	{f x}
	map f (x .. y)	=	(map f x) .. (map f y)
	map f (x U y)	=	(map f x) U (map f y)
	
--------------------------------------------------
--	Text Parser												--
--------------------------------------------------

-- A pattern is a mapping of text to information
-- about the text's formation. The basic pattern
-- called atomPattern, has only one such text and
-- gives no information relating to it. A pattern
-- match returns a set information for all possible
-- matches.

match (atom "hello") "hello"		=	{null}
match (atom "goodbye") "hello"	=	{}

forall pattern, text
	if pattern = text then
		match (atom pattern) text	=	{null}
	else
		match (atom pattern) text	=	{}
		
		
		
match ((atom "hello") .. (atom " ") .. (atom "world")) "hello world"		=	{[null, null, null]}
match ((atom "meh") .. (atom "lol")) "hello world"								=	{}
		
		
--------------------------------------------------
--	Helper Definitions									--
--------------------------------------------------
------------------------------------------
#operatorlg	U		*
U	=	union


------------------------------------------
#operatore	D		U
D	=	difference


------------------------------------------
#operatore	I		D
I	=	intersection


------------------------------------------
#operatorlg	all	*		

product all [3, 5, 4]		=	60
sum all {2, 3, 4, 5}			=	14
union all [{5}, {6}, {}]	=	{5, 6}

forall f, x, y
	if f x y = f y x then
		f all {x}				=	x
		f all [x]				=	x
		f all {x, y}			=	f x y
		f all [x, y]			=	f x y
		f all (union {x} y)	=	f x (f all y)
		f all ([x] .. y)		=	f x (f all y)

		
------------------------------------------
#operatorll	in		all

5 in {1, 2, 3, 4, 5}		=	true
3 in {true, false, 6}	=	false

forall x, y, z
	x in {}			=	false
	x in ({x} U y)	=	true
	x in (y U z)	=	(x in y) or (x in z)


------------------------------------------
size {1, 2, 3}		=	3
size {14, 3}		=	2

size {}	=	0
forall x, y
	size ({x} U y)	=	if (x in y) then (size y) else (size y + 1)
	
	
------------------------------------------
5 in bigset			=	true
true in bigset		=	true
bigset in bigset	=	true

forall x
	x in bigset
	
	
------------------------------------------
len [1, 2, 3]		=	3
len "hello"			=	5

len []	=	0
forall x, y
	len [x]			=	1
	len (x .. y)	=	len x + len y
		
------------------------------------------	
null		=	{}


------------------------------------------
first 3 [1, 2, 3, 4, 5]		=	[1, 2, 3]
last 3 [1, 2, 3, 4, 5]		=	[3, 4, 5]
first 2 [1, 2, 3]				=	[1, 2]

first 0 []		=	[]
last 0 []		=	[]
forall x, y, z
	first y []		=	[]
	last y []		=	[]
	if y >= 1 then
		first y [x]		=	x
		last y [x]		=	x
	else
		first y x		=	[]
		last y x			=	[]
	first z [x .. y]	=	first z x .. first (z - len x) y
	last z [x .. y]	=	last (z - len y) x .. last z y
	
	
------------------------------------------
map not [true, true, false]	=	[false, false, true]
map negate {1, 2, 3}				=	{-1, -2, -3}
map square {2, -2}				=	{4}
	
forall f, x, y
	map f []			=	[]
	map f {}			=	{}
	map f [x]		=	[f x]
	map f {x}		=	{f x}
	map f (x .. y)	=	(map f x) .. (map f y)
	map f (x U y)	=	(map f x) U (map f y)
	
	
------------------------------------------
cross [{1, 2}, {3, 4}]			=	{[1, 3], [1, 4], [2, 3], [2, 4]}
cross [{true, false}, {true}]	=	{[true, true], [false, true]}

cross [{}]	=	{}
forall x, y
	cross [{x}]				=	{[x]}
	cross	[{x} U y]		=	{[x]} U (cross [y])
	cross ([{x}] .. y)	=	map ((..) x) (cross y)
	
	
------------------------------------------
key (kvp "hello" "world")		=	"hello"
value (kvp "hello" "world")	=	"world"
key (kvp 5 "lol")					=	5

forall x, y
	key (kvp x y)		=	x
	value (kvp x y)	=	y

	
------------------------------------------
#operatore	where	all

[1, 2, 3] where (\x -> x > 2)				=	[3]
[1, 4, 2] where (\x -> x * x = x + x)	=	[1, 2]
{5, 6, 7} where (\x -> x = 6)				=	{6}

forall f, x, y
	[] where f			=	[]
	{}	where f			=	{}
	[x] where f			=	if (f x) then [x] else []
	{x} where f 		=	if (f x) then {x} else {}
	(x .. y) where f	=	(x where f) .. (y where f)
	(x U y) where f	=	(x where f) U (y where f)
	
--------------------------------------------------
--	Text Parser												--
--------------------------------------------------
-- A pattern is a mapping of text to information
-- about the text's formation. The basic pattern
-- called atomPattern, has only one such text and
-- gives no information relating to it. A pattern
-- match returns a set information for all possible
-- matches.

------------------------------------------
match (atom "hello") "hello"		=	{null}
match (atom "goodbye") "hello"	=	{}

forall pattern, text
	if pattern = text then
		match (atom pattern) text	=	{null}
	else
		match (atom pattern) text	=	{}
		
		
------------------------------------------
match ([atom "hello", atom " ", atom "world"]) "hello world"		=	{[null, null, null]}
match ([atom "meh", atom "lol"]) "hello world"							=	{}

forall x, y, text
	match [x] text		=	cross [match x text]
	local lens
		lens						=	range 0 (len text)	
		match (x .. y) text	=	union all (
			map (\z -> 
				cross [
					match x (first z text), 
					match y (last (len text - z) text)])
			lens)
		
		
------------------------------------------
match {atom "hello", atom "goodbye"} "hello"							=	{kvp (atom "hello") null}
match {atom "lol", [atom "hello", atom "world"]} "helloworld"	=	{kvp [atom "hello", atom "world"] [null, null]}

forall x, y, text
	iff (y in (match x text)) then
		(kvp x y) in (match {x} text)
	match (x U y) text	=	union (match x text) (match y text)

	
------------------------------------------
match any "w"	=	{"w"}
match any "x"	=	{"x"}
match any "wx"	=	{}

forall text
	if (len text) = 1 then
		match any text		=	{text}
	else
		match any text		=	{}
		

------------------------------------------
match string "\"hello\""	=	{"hello"}
match string "'goodbye'"	=	{"goodbye"}
match string "lol"			=	{}

forall text
	local instring, quotes
		quotes					=	{atom "\"", atom "'"}
		match string text		=	(
			map
				((match [quotes, instring, quotes] text) 
				where 	
				(\x -> index 0 x = index 2 x))
			(\x -> index 1 x))
		-- TODO: define instring
		
--------------------------------------------------
--	Solver													--
--------------------------------------------------
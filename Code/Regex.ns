-- A regular expression pattern that can be used
-- to match against a list of values
RegexPattern = class

	-- Takes a string and finds all possible matches of this pattern in it. Returns
	-- a set of RegexMatch's
	arg Match
	
end

-- A single individual match by a regular expression pattern
RegexMatch = class

	-- The index at the first character in the match
	arg CharStart
	
	-- The index at the last character in the match.  The length of the match would be
	-- CharEnd - CharStart
	arg CharEnd
	
	-- Pattern specific information about the match
	arg Info

end

-- A pattern that checks for a specific character in 
-- a string
AtomPattern = function
	
	-- The character to check against
	arg Character

	return RegexPattern(function
		arg String
		
		matches = set()
		for x in range(0, String.length)
			if String[x] == Character
				matches = matches.add(RegexMatch(x, x + 1, null))
			end
		end
		
		return matches
	end)
end

-- A pattern, made from a list of other patterns, which tries matching any of
-- the patterns it was given.
OrSetPattern = function

	-- The patterns to match against
	arg Patterns
	
	return RegexPattern(function
		arg String
		
		matches = set()
		for p in Patterns
			matches = matches.include(p.Match(String))
		end
		
		return matches
	end

end

-- A pattern, that takes another pattern and finds all strings that match it consecutively
-- at least once.
QuantificationPattern = function

	-- The pattern to look for
	arg Pattern

	return RegexPattern(function
		arg String
		
		matches = Pattern.Match(String)
		newmatches = set()
		
end